#include<bits/stdc++.h>
#define Code ios_base::sync_with_stdio(false);
#define By cin.tie(NULL);
#define Rachit_Badoni cout.tie(NULL);
#define ll long long
#define yes cout<<"YES"<<endl;
#define no cout<<"NO"<<endl;
#define set_bits __builtin_popcountll
#define trail_zeroes __builtin_ctz

const int M=1e9+7;
ll mod(ll x) {return ((x%M+M)%M);}
ll add(ll a,ll b) {return mod(mod(a)+mod(b));}
ll mul(ll a,ll b) {return mod(mod(a)*mod(b));}
//#ignore#writing_words
//#ceil(x);#floor(x);
using namespace std;

int power(ll a,unsigned int b,int M)//a to the power b (here b can be represented in binary and then magic begins)
{
    int ans=1;
    a=a%M;//if greater or equal update it
    if(a==0)//shows x is completely div by p(if x and p as...4 and 2 ..2 and 2..6 and 2..here )
        return 0;//so in these case if we find the power then too it will be div completely...
    while(b>0)
    {
        if(b&1)//if odd
            ans=(ans*a)%M;
        b=b>>1;//y=y/2;
        a=(a*a)%M;
    }
    return ans;
}
int multiply(ll a,ll b,ll M)//for multiplying very large number in terms of modulo M(if a and b are very large that there multiplication leads to overflow then use it)
{
    int ans=0;
    while(b>0)
    {
        if(b&1)
            ans=(ans+a)%M;
        a=(a+a)%M;
        b=b>>1;
    }
    return ans;
}
int count_digit(int number) {
   return int(log10(number) + 1);
}
int gcd(int a,int b)
{
    if(b==0)
        return a;
    return(b,a%b);
}
int indexi;
bool is_present(vector<int>fr,int frame,int key)
{
    for(int i=0;i<fr.size();i++)
    {
        if(fr[i]==key)
        {
            indexi=i;
            return true;
        }
    }
    return false;
}
void solve()
{
  int n;
  cin>>n;
  vector<int>a(n);
  for(int i=0;i<n;i++)
    cin>>a[i];
  int frame;
  cin>>frame;
  queue<int>q;
  vector<int>fr;
  int hit=0,fault=0;
  for(int i=0;i<n;i++)
  {
      if(is_present(fr,frame,a[i]))
      {
          queue<int>qt;
          while(q.size()>0&&q.front()!=indexi)
          {
              qt.push(q.front());
              q.pop();
          }
          q.pop();
          while(qt.size()>0)
          {
              q.push(qt.front());
              qt.pop();
          }
          hit++;
      }
      else
      {
          fault++;
          if(fr.size()<frame)
          {
              q.push(fr.size());
            fr.push_back(a[i]);
          }
          else
          {
              int indi=q.front();
              fr[indi]=a[i];
              q.pop();
              q.push(indi);
          }

      }
  }
  cout<<hit<<" "<<fault<<endl;
}
int main()
{
                          Code By Rachit_Badoni
    int t=1;
   // cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}
