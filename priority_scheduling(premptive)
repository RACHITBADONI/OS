#include<bits/stdc++.h>
#define Code ios_base::sync_with_stdio(false);
#define By cin.tie(NULL);
#define Rachit_Badoni cout.tie(NULL);
#define ll long long
#define yes cout<<"YES"<<endl;
#define no cout<<"NO"<<endl;
#define set_bits __builtin_popcountll
#define trail_zeroes __builtin_ctz

const int M=1e9+7;
ll mod(ll x) {return ((x%M+M)%M);}
ll add(ll a,ll b) {return mod(mod(a)+mod(b));}
ll mul(ll a,ll b) {return mod(mod(a)*mod(b));}
//#ignore#writing_words
//#ceil(x);#floor(x);
using namespace std;

int power(ll a,unsigned int b,int M)//a to the power b (here b can be represented in binary and then magic begins)
{
    int ans=1;
    a=a%M;//if greater or equal update it
    if(a==0)//shows x is completely div by p(if x and p as...4 and 2 ..2 and 2..6 and 2..here )
        return 0;//so in these case if we find the power then too it will be div completely...
    while(b>0)
    {
        if(b&1)//if odd
            ans=(ans*a)%M;
        b=b>>1;//y=y/2;
        a=(a*a)%M;
    }
    return ans;
}
int multiply(ll a,ll b,ll M)//for multiplying very large number in terms of modulo M(if a and b are very large that there multiplication leads to overflow then use it)
{
    int ans=0;
    while(b>0)
    {
        if(b&1)
            ans=(ans+a)%M;
        a=(a+a)%M;
        b=b>>1;
    }
    return ans;
}
int count_digit(int number) {
   return int(log10(number) + 1);
}
int gcd(int a,int b)
{
    if(b==0)
        return a;
    return(b,a%b);
}
int ct[100];//0
void solve()
{
   int n;

   cout<<"enter the number of process"<<endl;
    cin>>n;
    int pid[100],art[100],bt[100],wt[100],tat[100],prt[100];
    cout<<"enter sbkux"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>pid[i];
        cin>>art[i];
        cin>>bt[i];
        cin>>prt[i];
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(art[j]>art[j+1])
            {
                swap(art[j],art[j+1]);
                swap(bt[j],bt[j+1]);
                swap(pid[j],pid[j+1]);
                swap(prt[j],prt[j+1]);
            }
        }
    }
    //ct[0]=art[0]+bt[0];
  int cot=0;//ct[0];
   //vis[pid[0]]=1;
   int timepassed=0;//ct[0];
 int rbt[100];
 for(int i=0;i<n;i++)
    rbt[i]=bt[i];//remaining burst time
   for(int i=0;i<n;i++)
   {
       bool flag=true;
       int temp_pid=i,temp_prt=INT_MAX;
        for(int j=0;j<n;j++)
        {
            if(rbt[j]!=0)
            {
                if(art[j]<=timepassed&&prt[j]<temp_prt)
                {
                    flag=false;
                    temp_pid=j;//4th process let say and at any index
                    temp_prt=prt[j];
                }
            }
        }
         timepassed++;//linearly chlo ekla chlo
         if(!flag)
        rbt[temp_pid]--;
      if(rbt[temp_pid]==0)//mtlb ek process khtm
        ct[temp_pid]=timepassed;

       if(rbt[temp_pid]!=0)//don't move till we make any one process 0 as we have n process
        i--;
   }

   float atat=0,awt=0;
    for(int i=0;i<n;i++)
    {
        cout<<ct[i]<<" "<<endl;
        tat[i]=ct[i]-art[i];
        wt[i]=tat[i]-bt[i];
        atat+=tat[i];
        awt+=wt[i];
    }
   cout<<fixed<<setprecision(4)<<awt/(n*1.0)<<" "<<atat/(n*1.0);
}
int main()
{
                          Code By Rachit_Badoni
    int t=1;
   // cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}

